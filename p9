#include<stdio.h>
#include<omp.h>
#include<stdlib.h>
long long factorial(long n){
    long long i,out=1;
    for(i=1;i<=n;i++){
        out*=i;
    }
    return out;
}
int main(){
    long long *x;
    long long n=12,j=0;
    int i;
    omp_set_dynamic(0);
    omp_set_num_threads(4);
    x=(long long*)malloc(n*sizeof(long long));
    if(x==NULL){
        printf("not able to allocate\n");
        return 1;
    }
    #pragma omp parallel for firstprivate(x)
    for(i=0;i<n;i++){
        x[i]=factorial(i);
    }
    for(int i=1;i<n;i++){
        j+=i;
        x[i]=j*x[i-1];
        printf("%d %lld\n",j,x[i]);
    }
    for(i=0;i<n;i++){
    printf("factorial(%2d) = %14lld  x[%2d] = %14lld\n",i,factorial(i),i,x[i]);
    }
    free(x);
    return 0;
}
// #include <stdio.h>
// #include <stdlib.h>
// #include <omp.h>

// long long factorial(long n) {
//     long long i, out = 1;
//     for (i = 1; i <= n; i++) {
//         out *= i;
//     }
//     return out;
// }

// int main() {
//     int i;
//     long long *x;
//     long long n = 12;

//     omp_set_dynamic(0);
//     omp_set_num_threads(4);

//     printf("4 threads\n");

//     x = (long long *) malloc(n * sizeof(long long));
//     if (x == NULL) {
//         printf("Memory allocation failed\n");
//         return 1;
//     }

//     #pragma omp parallel for firstprivate(x)
//     for (i = 0; i < n; i++) {
//         x[i] = factorial(i);
//     }

//     long long j = 0;
//     for (i = 1; i < n; i++) {
//         j += i;
//         x[i] = j * x[i - 1];
//     }

//     for (i = 0; i < n; i++) {
//         printf("factorial(%2d) = %14lld   x[%2d] = %14lld\n", i, factorial(i), i, x[i]);
//     }

//     free(x);
//     return 0;
// }
